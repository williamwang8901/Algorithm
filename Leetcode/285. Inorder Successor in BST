/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        if (root == null || p == null) {
            return null;
        }
        
        // return inOrder(root, p);
        
        // return bst(root, p);
        
        return recursive(root, p);
    }
    // Iterate in order which time is O(n), but not good
    TreeNode pre = null;
    public TreeNode inOrder(TreeNode root, TreeNode p) {
        if (root == null) {
            return root;
        }
        
        TreeNode left = inOrder(root.left, p);
        if (left != null) {
            return left;
        }
        
        if (pre != null && pre == p) {
            return root;
        }
        pre = root;
        
        return inOrder(root.right, p);
    }
    
    //let's use its property which is binary search tree 
    
    public TreeNode bst(TreeNode root, TreeNode p) {
        TreeNode parent = null;
        while (root != null) {
            if (p.val == root.val) {
                
                if (root.right == null) {
                    return parent;
                }
                return leftMost(root.right);
            }
            
            if (p.val < root.val) { // 这里只有当p.val < root.val 的时候我们才把 parent 赋值为 root 
                parent = root;
                root = root.left;
            } else {
                root = root.right;
            }
            
        }
        return null;
    }
    
    public TreeNode leftMost(TreeNode root) {
        if (root == null) {
            return null;
        }
        
        if (root.left == null) {
            return root;
        }
        
        return leftMost(root.left);
    }
    
    //其实我们还可以简化 上面的search
    public TreeNode bst2(TreeNode root, TreeNode p) {
        TreeNode parent = null;
        while (root != null) {
            if (root.val > p.val) {
                parent = root;
                root = root.left;
            } else {
                root = root.right;
            }
            
        }
        return parent;
    } 
    
    //也可递归
    
    public TreeNode recursive(TreeNode root, TreeNode p) {
        if (root == null) {
            return null;
        }
        
        if (root.val > p.val) {
            TreeNode left = recursive(root.left, p);
            if (left == null) {
                return root;
            } else {
                return left;
            }
        } else {
            return recursive(root.right, p);
        }
    }
}