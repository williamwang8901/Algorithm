/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> closestKValues(TreeNode root, double target, int k) {
        List<Integer> result = new ArrayList<Integer>();
        if (root == null) {
            return result;
        }
        
        LinkedList<Integer> dequeue = new LinkedList<Integer>();
        
        LinkedList<TreeNode> stack = new LinkedList<TreeNode>();
        
        while (root != null || !stack.isEmpty()) {
            while (root != null) {
                stack.push(root);
                root = root.left;
            }
            
            TreeNode cur = stack.pop();
            if (dequeue.size() < k) {
                dequeue.offer(cur.val);
            } else if (Math.abs(dequeue.peekFirst() - target) > Math.abs(target - cur.val)) {
                dequeue.poll();
                dequeue.offer(cur.val);
            } else {
                return dequeue;
            }
            root = cur.right;
        }
                
        return dequeue;
    }
}