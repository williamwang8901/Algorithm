//http://www.cnblogs.com/Dylan-Java-NYC/p/7530636.html check this website very good!
class Solution {
    public int findNumberOfLIS(int[] nums) {
        //len[i]: the length of the Longest Increasing Subsequence which ends with nums[i].
        //cnt[i]: the number of the Longest Increasing Subsequence which ends with nums[i].
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        int[] dp = new int[nums.length];
        int[] count = new int[nums.length];
        
        dp[0] = 1;
        
        int length = 0;
        int result = 0;
        for (int i = 0; i < nums.length; i++) {
            dp[i] = 1;
            count[i] = 1;
            for (int j = 0; j < i ; j++) {
                if (nums[j] < nums[i]) {
                    if (dp[i] < dp[j] + 1) {
                        dp[i] = dp[j] + 1;
                        count[i] = count[j];
                    } else if (dp[i] == dp[j] + 1) {
                        count[i] += count[j];
                    }
                }
            }
            if (length < dp[i]) {
                length = dp[i];
                result = count[i];
                
            } else if (length == dp[i]) {
                result += count[i];
            }
        }
        
        return result;
    }
}