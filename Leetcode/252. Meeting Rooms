/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public boolean canAttendMeetings(Interval[] intervals) {
        if (intervals == null) {
            return false;
        }
        Comparator<Interval> comparator = new Comparator<Interval>(){
            public int compare(Interval o1, Interval o2) {
                return o1.start - o2.start;
            }  
        };
        Arrays.sort(intervals, comparator);
        
        Interval pre = null;
        for (int i = 0; i < intervals.length; i++) {
            if (pre == null) {
                pre = intervals[i];
                continue;
            }
            if (pre.end > intervals[i].start) {
                return false;
            }
            pre = intervals[i];
        }
        return true;
    }
}