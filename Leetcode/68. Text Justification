public class Solution {/*
由于返回的结果是多行的，所以我们在处理的时候也要一行一行的来处理，首先要做的就是确定每一行能放下的单词数，这个不难，就是比较n个单词的长度和加上n - 1个空格的长度跟给定的长度L来比较即可，找到了一行能放下的单词个数，然后计算出这一行存在的空格的个数，是用给定的长度L减去这一行所有单词的长度和。得到了空格的个数之后，就要在每个单词后面插入这些空格，这里有两种情况，比如某一行有两个单词"to" 和 "a"，给定长度L为6，如果这行不是最后一行，那么应该输出"to   a"，如果是最后一行，则应该输出 "to a  "，所以这里需要分情况讨论，最后一行的处理方法和其他行之间略有不同。最后一个难点就是，如果一行有三个单词，这时候中间有两个空，如果空格数不是2的倍数，那么左边的空间里要比右边的空间里多加入一个空格，那么我们只需要用总的空格数除以空间个数，能除尽最好，说明能平均分配，除不尽的话就多加个空格放在左边的空间里，以此类推，具体实现过程还是看代码吧：*/
    public ArrayList<String> fullJustify(String[] words, int L) {
        
                ArrayList<String> res = new ArrayList<String>();  
           
                // count word length  
                int len = 0, start = 0;;  
                for (int i=0; i<words.length; i++)
                {  
                     len += words[i].length();  
                     if ((len + i - start) > L)
                     {  
                       res.add(justify(words, start, i-1, len-=words[i].length(), L));  
                       // reset  
                       len = words[i].length();  
                       start = i;  
                    }  
                }  
               // // last line  

                 res.add(justify(words, start, words.length-1, len, L));  
               
               
               // if words is empty, stuff results with L spaces  
               if (res.size() == 0) 
               {  
                 res.add(stuffSpaces(L));  
               }  
               return res;  
  }
  
  
          // generate a string of n spaces  
         private String stuffSpaces(int n) 
         {  
               if (n==0) return "";  
               StringBuilder ss = new StringBuilder();  
               while (n > 0) 
               {  
                 ss.append(' ');  
                 --n;  
               }  
               return ss.toString();  
         }  
   
         // generate a string of length L, containing words[start..end], inclusively  
         private String justify(String[] words, int start, int end, int total, int L) 
         {  
               StringBuilder ss = new StringBuilder();  
               if (end == start || end == words.length-1) 
               { // single word or last words  
                     while (start < end) 
                     {  
                       ss.append(words[start++]);  
                       ss.append(stuffSpaces(1));  
                     }  
                     ss.append(words[end]);  
                     ss.append(stuffSpaces(L - ss.length()));  
               } 
               else 
               {  
                     int spaces = (L - total) / (end - start);  
                     int extras = (L - total) % (end - start);  
                     // buld up full string  
                     while (start < end) 
                     {  
                           ss.append(words[start++]);  
                           ss.append(stuffSpaces(spaces));  
                           if (extras > 0) 
                           {  
                             ss.append(stuffSpaces(1));  
                             --extras;  
                           }  
                     }  
                     ss.append(words[end]);  
                }
                
                return ss.toString();  
            }  
  
}