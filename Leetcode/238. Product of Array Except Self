class Solution {
    public int[] productExceptSelf(int[] nums) {
        return productExceptSelf2(nums);
    }
    
    //o(n) space
    public int[] productExceptSelf1(int[] nums) {
        if (nums == null || nums.length == 0) {
            return nums;
        }
        
        int[] result = new int[nums.length];
        
        
        int[] left = new int[nums.length];
        int[] right = new int[nums.length];
        
        int product = nums[0];
        left[0] = 1;
        for (int i = 1; i < nums.length; i++) {
            left[i] = product;
            product *= nums[i];
        }
        
        right[nums.length - 1] = 1;
        product = nums[nums.length - 1];
        for (int i = nums.length - 2; i >= 0; i--) {
            right[i] = product;
            product *= nums[i];
        }
        
        for (int i = 0; i < nums.length; i++) {
            result[i] = left[i] * right[i];
        }
        return result;
    }
    
    
    //does not have extra space
    public int[] productExceptSelf2(int[] nums) {
        if (nums == null || nums.length == 0) {
            return nums;
        }
        
        int[] result = new int[nums.length];
        
        result[0] = 1;
        for (int i = 1;i < nums.length; i++) {
            result[i] = result[i - 1] * nums[i - 1];
        }
        
        int right = 1;
        for (int i = nums.length - 1; i >= 0; i--) {
            result[i] = result[i] * right;
            right = right * nums[i];
        }
        return result;
    }
}