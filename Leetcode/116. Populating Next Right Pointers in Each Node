/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        if (root == null) {
            return;
        }
        
        // recursive(root);
        iterate(root);
    }
    
    
    //recursive
    public void recursive(TreeLinkNode root) {
        if (root == null) {
            return;
        }
        
        if (root.left != null) {
            root.left.next = root.right;
        }
        
        if (root.right != null) {
            root.right.next = root.next == null ? null : root.next.left;
        }
        
        recursive(root.left);
        recursive(root.right);
    }
    
    
    //iterate
    public void iterate(TreeLinkNode root) {
        if (root == null) return;
        TreeLinkNode pre = root;
        TreeLinkNode cur = null;
        while(pre.left != null) { //记录下一层的left most node
            cur = pre;
            while(cur != null) {
                if (cur.left != null) {
                    cur.left.next = cur.right;
                }
                if (cur.right != null) {
                    cur.right.next = cur.next == null ? null : cur.next.left;
                }
                cur = cur.next;
            }
            pre = pre.left;
        }
    }
}