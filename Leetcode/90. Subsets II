class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0) {
            return result;
        }
        List<Integer> ret = new ArrayList<Integer>();
        Arrays.sort(nums);
        
        result.add(new ArrayList<Integer>(ret));
        dfs(nums, 0, result, ret);
        return result;
    }
    
    public void dfs(int[] nums, int start, List<List<Integer>> result, List<Integer> ret) {      
        for (int i = start; i < nums.length; i++) {
            if (i > start && nums[i] == nums[i - 1]) {
                continue;
            }
            ret.add(nums[i]);
            result.add(new ArrayList<Integer>(ret));
            dfs(nums, i + 1, result, ret);
            ret.remove(ret.size() - 1);
        }
    }
}