class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0) {
            return result;
        }
        List<Integer> ret = new ArrayList<Integer>();
        boolean[] visited = new boolean[nums.length];
        dfs(nums, 0 , result, ret, visited);
        return result;
    }
    
    public void dfs(int[] nums, int start, List<List<Integer>> result, List<Integer> ret, boolean[] visited) {
        if (ret.size() == nums.length) {
            System.out.println(ret);
            result.add(new ArrayList<Integer>(ret));
            return;
        }
        
        for (int i = 0; i < nums.length; i++) {
            if (visited[i]) {
                continue;
            }
            ret.add(nums[i]);
            visited[i] = true;
            dfs(nums, start, result, ret, visited);
            visited[i] = false;
            ret.remove(ret.size() - 1);
        }
    }
}