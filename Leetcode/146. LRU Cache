class LRUCache {
    class Node {
        Node next;
        Node pre;
        int val;
        int key;  // 注意要加key 因为我们要用key 来删除再map 中的mapping
        public Node(int key, int val) {
            this.key = key;
            this.val = val;
            next = null;
            pre = null;
        }
    }
    int capacity;
    Node head;
    Node tail;
    HashMap<Integer, Node> map;
    public LRUCache(int capacity) {
        this.capacity = capacity;
        head = new Node(0, 0);
        tail = new Node(0, 0);
        head.next = tail;
        tail.pre = head;
        map = new HashMap<Integer, Node>();
    }
    
    
    public int get(int key) {
        if (map.containsKey(key)) {
            Node cur = map.get(key);
            remove(cur);
            add(head, cur);
            int val = map.get(key).val;
            return  val;
        }
        return -1;
    }
    
    public void put(int key, int value) {
        if (map.containsKey(key)) {
            Node cur = map.get(key);
            remove(cur);
            add(head, cur);
            cur.val = value;
        } else {
            Node newNode = new Node(key, value);
            if (map.size() == capacity) {
                map.remove(tail.pre.key);   //注意不要忘了这里 要delete in map
                remove(tail.pre);
            }
            add(head, newNode);
            map.put(key, newNode);
        }
    }
    
    public void remove(Node node) {
        node.pre.next = node.next;
        node.next.pre = node.pre;
        node.pre = null;
        node.next = null;
    }
    
    
    //add node in the behind of cur
    public void add(Node cur, Node node) {
        node.next = cur.next;
        cur.next.pre = node;
        cur.next = node;
        node.pre = cur;
    }

}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */