class Solution {
    //看花花jiang 的视屏    time complexity: O(2^m * m)
    //O(2^m) subproblems
    //each problem taks O(m) time
    //space complexity O(2^m)
    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {
        if (maxChoosableInteger <= 0 || desiredTotal < 0) {
            return false;
        }
        if (desiredTotal == 0) {
            return true;
        }
        int sum = 0;
        for (int i = 1; i <= maxChoosableInteger; i++) {
            sum += i;
        }
        
        if (sum < desiredTotal) {
            return false;
        }
        
        HashMap<Integer, Boolean> map = new HashMap<Integer, Boolean>();
        boolean[] visited = new boolean[maxChoosableInteger + 1];
        return dfs(maxChoosableInteger, desiredTotal, 0, visited, map);
    }
    
    
    public boolean dfs(int maxChoosableInteger, int desiredTotal, int curSum, boolean[] visited, HashMap<Integer, Boolean> map) {
        if (curSum >= desiredTotal) {
            return false;
        }
        int key = reformat(visited);
        if (map.containsKey(key)) {
            return map.get(key);
        }
        
        for (int i = 1 ; i <= maxChoosableInteger; i++) {
            if (visited[i]) {
                continue;
            }
            visited[i] = true;
            if (!dfs(maxChoosableInteger, desiredTotal, curSum + i, visited, map)) {
                map.put(key, true);
                visited[i] = false;
                return true;
            }
            visited[i] = false;
        }
        map.put(key, false);
        return false;
    }
    
    public int reformat(boolean[] visited) {
        int result = 0;
        
        for (int i = 0; i < visited.length; i++) {
            result <<= 1;
            result |= visited[i] ? 1 : 0;
        }
        return result;
    }
}