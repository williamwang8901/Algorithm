class Solution {
////http://www.cnblogs.com/grandyang/p/8679286.html
    public int orderOfLargestPlusSign(int N, int[][] mines) {
        
        int[][] input = new int[N][N];
        
        // Fill each row 
        for (int[] row: input) {
            Arrays.fill(row, 1);
        }
                
        
        for (int[] mine : mines) {
            input[mine[0]][mine[1]] = 0;
        }
        // return bruteForce(N, input);
        
        // return method2(N, mines);
        
        return method3(N, mines);
    }
    
    public int bruteForce(int N, int[][] input) {
        
        int res = 0;
        for (int i = 0; i < input.length; i++) {
            for (int j = 0; j < input[0].length; j++) {
                if (input[i][j] == 1) {
                    int k = 0;
                    while (canExpand(input, N, i, j, k)) ++k;
                    res = Math.max(res, k);
                }
            }
        }
        return res;
    }
    
    
    public boolean canExpand(int[][] input, int N, int x, int y, int k) {
        if (x - k < 0 || y - k < 0 || x + k >= N || y + k >= N) return false;
        return input[x - k][y] == 1 && input[x][y + k] == 1 && input[x + k][y] ==1  && input[x][y - k] == 1;
    }
    
    //method2
    public int method2(int N, int[][] mines) {
        if (mines == null || N <= 0) {
            return 0;
        }
        HashSet<Integer> set = new HashSet<Integer>();
        for (int i = 0; i < mines.length; i++) {
            for (int j = 0; j < 2; j++) {
                int x = mines[i][0];
                int y = mines[i][1];
                set.add( x * N + y);
            }
        }
        int[][] grid = new int[N][N];
        int index = 0;
        for (int i = 0; i < N; i++) {  // for each row
            int count = 0;
            for (int j = 0; j < N; j++) { // colum from left to right
                index = i * N  + j;
                if (set.contains(index)) {
                    count = 0;
                    grid[i][j] = 0;
                } else {
                    count++;
                    grid[i][j] = count;
                }
            }
            
            count = 0;
            for (int j = N - 1; j >= 0; j--) {// colum from right to left
                index = i * N  + j;
                if (set.contains(index)) {
                    count = 0;
                    grid[i][j] = 0;
                } else {
                    count++;
                    grid[i][j] = Math.min(grid[i][j], count);
                }
                // System.out.print(grid[i][j]);
            }  
        }
        
        int result = 0; // max_int_value
        
        for (int j = 0; j < N; j++) { // for each column
            int count = 0;
            for (int i = 0; i < N; i++) { // row from up do down;
                index = i * N  + j;
                if (set.contains(index)) {
                    count = 0;
                    grid[i][j] = 0;
                } else {
                    count++;
                    grid[i][j] = Math.min(grid[i][j], count);
                }
            }
            count = 0;
            for (int i = N - 1; i >= 0; i--) { //row from down to up
                index = i * N  + j;
                if (set.contains(index)) {
                    count = 0;
                    grid[i][j] = 0;
                } else {
                    count++;
                    grid[i][j] = Math.min(grid[i][j], count);
                    result = Math.max(grid[i][j], result);
                }
            }
        }
        return result;
    }
    
    
    //compress above for loops
    public int method3(int N, int[][] mines) {
        // Fill each row 
        
        int[][] grid = new int[N][N];
        for (int[] row: grid) {
            Arrays.fill(row, N);  //这里不能用fills（1）因为如果我们初始化为1  那么 当我们用 Math.min()的时候 始终得到的是长度为1
        }
                
        
        for (int[] mine : mines) {
            grid[mine[0]][mine[1]] = 0;
        }
        
        
for (int i = 0; i < N; i++) {
        for (int j = 0, k = N - 1, l = 0, r = 0, u = 0, d = 0; j < N; j++, k--) {
            grid[i][j] = Math.min(grid[i][j], l = (grid[i][j] == 0 ? 0 : l + 1));
            grid[i][k] = Math.min(grid[i][k], r = (grid[i][k] == 0 ? 0 : r + 1));
            grid[j][i] = Math.min(grid[j][i], u = (grid[j][i] == 0 ? 0 : u + 1));
            grid[k][i] = Math.min(grid[k][i], d = (grid[k][i] == 0 ? 0 : d + 1));
        }
    }
        
    int res = 0;
        
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            res =  Math.max(res, grid[i][j]);
        }
    }
        return res;
    }
}
