class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        return uf(grid);
    
    }
    
    // using dfs search
    public int search(char[][] grid) {
        int result = 0;
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                
                if (grid[i][j] == '1' && !visited[i][j]) {
                    result++;
                    dfs(grid, i, j, visited);
                }
            }
        }    
        return result;
    }
    
    int[][] dir = new int[][]{{0,1}, {0,-1}, {1,0}, {-1,0}};
    public void dfs(char[][] grid, int i, int j, boolean[][] visited) {
        visited[i][j] = true;
        
        for (int k = 0; k < 4; k++) {
            int next_x = i + dir[k][0];
            int next_y = j + dir[k][1];
            
            if (next_x >= 0 && next_x < grid.length && next_y >= 0 && next_y < grid[0].length && !visited[next_x][next_y] && grid[next_x][next_y] == '1') {
                dfs(grid, next_x, next_y, visited);
            }
        }
    }
    
    //method2 . 没用visited 数组 用了 hashset 
//     public int numIslands(char[][] grid) {
//         if (grid == null || grid.length == 0 || grid[0].length == 0) {
//             return 0;
//         }
//         int count = 0;
//         int m = grid.length;
//         int n = grid[0].length;
//         HashSet<Integer> set = new HashSet<Integer>();
//         for (int i = 0; i < m; i++) {
//             for (int j = 0; j < n; j++) {
//                 int index = i * n + j;
//                 if (!set.contains(index) && grid[i][j] == '1') {
//                     dfs(grid, i, j, m, n, set);
//                     count++;
//                 }
//             }
//         }
//         return count;
//     }
    
//     int[][] direction = {{0, -1},{0, 1},{-1, 0}, {1, 0}};
//     public void dfs(char[][] grid, int i, int j, int m, int n, HashSet<Integer> set) {
//         int index = i * n + j;
//         set.add(index);
//         for (int k = 0; k < 4; k++) {
//             int next_i = direction[k][0] + i;
//             int next_j = direction[k][1] + j;
//             int next_index = next_i * n + next_j;
            
//             if (!set.contains(next_index) && next_i >= 0 && next_i < m 
//                  && next_j >= 0 && next_j < n && grid[next_i][next_j] == '1') {
//                     dfs(grid, next_i, next_j, m, n, set);
//             }
//         }
//     }
    
    
    /*Weighted Quick Union with Path Compression  这才是最终的方法
    时间复杂度分析
union()：最坏情况下为O(lgN)。
find()：最坏情况下为O(lgN)。
Weighted Quick Union with Path Compression Very near to 1 (amortized)
 Weighted Quick Union with Path Compression Very near to 1 (amortized)
I think Union Find should implement both rank and path compression, then we can get amortized O(m*n) here.
Time complexity:O(M×N) where M is the number of rows and N is the number of columns. Note that Union operation takes essentially constant time1 when UnionFind is implemented with both path compression and union by rank.
https://blog.csdn.net/Yaokai_AssultMaster/article/details/78888846
https://blog.csdn.net/dm_vincent/article/details/7655764
    */
    class Unionfind {
        int[] root;
        int[] size;
        int count;
        public Unionfind(char[][] grid) {
            int m = grid.length;
            int n = grid[0].length;
            root = new int[m * n];
            size = new int[m * n];
            for (int i = 0; i < m; i++) {  
                for (int j = 0; j < n; j++) {  
                    if (grid[i][j] == '1') {
                        int id = i * n + j;
                        root[id] = id;
                        count++;
                    }
                }  
            }  
        }
        
        public void union(int i, int j) {
            int rooti = find(i);
            int rootj = find(j);
            if (rooti == rootj) {
                return;
            }
            
            //weight quick union, we put smaller tree root under bigger tree root
            if (size[rooti] >= size[rootj]) {
                root[rootj] = rooti; 
                size[rooti] += size[rootj];
            } else {
                root[rooti] = rootj;
                size[rootj] += size[rooti];
            }
            count--;
        }
        
        
        /*make every other node in path
point to its grandparent
*/
        public int find(int x) {   //此步是path compression
            int temp = x;
            while (x != root[x]) {
                     
                root[x] = root[root[x]];
		x = root[x];
            }
            return x;
        }
    }
    
    
    //union find
    public int uf(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        
        Unionfind helper = new Unionfind(grid);
        
        int m = grid.length;
        int n = grid[0].length;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1') {
                    int p = i * n + j; 
                    for (int k = 0; k < 4; k++) {
                        int next_i = dir[k][0] + i;
                        int next_j = dir[k][1] + j;
                        
                        if (next_i >= 0 && next_i < m && next_j >= 0 && next_j < n && grid[next_i][next_j] == '1') {
                            int q = next_i * n + next_j;
                            helper.union(p, q);
                        }
                    }
                }
            }
        }
        return helper.count;
    }
    
    
    
}