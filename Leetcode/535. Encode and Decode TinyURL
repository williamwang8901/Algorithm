public class Codec {

    
    HashMap<String, String> keyToUrl;
    HashMap<String, String> urlToKey;
    String code = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    String host = "http://tinyurl.com/";
    public Codec () {
        keyToUrl = new HashMap<String, String>(); // key mapping to url
        urlToKey = new HashMap<String, String>();   // url mapping to key
    }
    // Encodes a URL to a shortened URL.
    public String encode(String longUrl) {
        if (urlToKey.containsKey(longUrl)) {
            return urlToKey.get(longUrl);
        }
        
        String key = null;
        do {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < 6; i++) {
                int random = (int)(Math.random() * code.length());
                sb.append(code.charAt(random));
            }
            key = sb.toString();
        } while (keyToUrl.containsKey(key));
        
        keyToUrl.put(key, longUrl);
        urlToKey.put(longUrl, key);
        return host + key;
    }

    // Decodes a shortened URL to its original URL.
    public String decode(String shortUrl) {
        return keyToUrl.get(shortUrl.replace(host, ""));
    }
    
    
    
    
//      // Encodes a URL to a shortened URL.
//         public String encode(String longUrl) {
//             if (urlToKey.containsKey(longUrl)) {
//                 return BASE_HOST + urlToKey.get(longUrl);
//             }

//             String key = null;
//             do {
//                 StringBuilder sb = new StringBuilder();
//                 for (int i = 0; i < 6; i++) {
//                     int r = (int)(Math.random() * SEED.length());
//                     sb.append(SEED.charAt(r));
//                 }
//                 key = sb.toString();
//             } while (keyToUrl.containsKey(key));

//             keyToUrl.put(key, longUrl);
//             urlToKey.put(longUrl, key);
//             return BASE_HOST + key;
//         }

//         // Decodes a shortened URL to its original URL.
//         public String decode(String shortUrl) {
//             return keyToUrl.get(shortUrl.replace(BASE_HOST, ""));
//         }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.decode(codec.encode(url));